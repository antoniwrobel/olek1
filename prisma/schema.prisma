datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model User {
  id                String @id @default(cuid())
  email             String @unique
  isAdmin           Boolean?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  password          Password?
  reservations      Reservation[]
  notes             Note[]
}

model Reservation {
  id                      String            @id @default(uuid())
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  deleted                 Boolean           @default(false)
  deletedByAdmin          Boolean           @default(false)
  startDate               DateTime
  endDate                 DateTime
  projectName             String
  projectId               String
  userId                  String
  confirmed               Boolean           @default(false)
  user                    User              @relation(fields: [userId], references: [id])
  finishedReservation     FinishedReservation[]
}

model FinishedReservation {
  id                  String            @id @default(uuid())
  reservationId       String
  reservation         Reservation       @relation(fields: [reservationId], references: [id])
  itemId              String
  item                Item              @relation(fields: [itemId], references: [id])
}


model Item {
  id                  String            @id @default(uuid())
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  parent              ItemParent?       @relation(fields: [parentId], references: [id])
  parentId            String
  taken               Boolean           @default(false)
  isDeleted           Boolean           @default(false)
  reservationId       String?
  finishedReservation FinishedReservation[]
}

model ItemParent {
  id                  String            @default(cuid()) @id
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  name                String
  desc                String
  items               Item[]
  quantity            Int
}

model Password {
  hash String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}


